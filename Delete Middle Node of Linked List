#include<bits/stdc++.h>
using namespace std;
class Node
{
    public:
    int data;
    Node* next;
    public:
    Node(int data1,Node* next1)
    {
        data=data1;
        next=next1;
      
    }
    public:
    Node(int data1)
    {
        data=data1;
        next=nullptr;
    }
};
Node* con(vector<int>k)
{
  Node* head=new Node(k[0]);
  Node* mov=head;
  for(int i=1;i<k.size();i++)
  {
     Node* temp=new Node(k[i]);
     mov->next=temp;
     mov=mov->next;
  }
  return head;
}
//brutte approach
Node* deletemiddlenode(Node* head)
{
    if(head==NULL or head->next==NULL)
    {
        return head;
    }
    int c=0;
    Node* temp=head;
    while(temp!=NULL)
    {
        c++;
        temp=temp->next;
    }
    temp=head;
    int r=c/2;
    while(temp!=NULL)
    {
        r--;
        if(r==0)
        {
            Node* middle=temp->next;
            temp->next=temp->next->next;
            delete middle;
            return head;
        }
        temp=temp->next;
    }
    return head;
    
    Node* middle=temp->next;
    temp->next=temp->next->next;
    delete middle;
    return head;
}
//optimse code
Node* deletemiddlenode2(Node* head)
{
    Node* slow=head;
    Node* fast=head->next->next;
    while(fast!=NULL and fast->next!=NULL)
    {
        slow=slow->next;
        fast=fast->next->next;
    }
    Node* middle=slow->next;
    slow->next=slow->next->next;
    delete middle;
    return head;

}
int main()
{
vector<int>k={1,2,3,4,5,6,7,8};
//coneverting vector to linked list;
Node* head=con(k);
deletemiddlenode(head);
deletemiddlenode2(head);
 while(head)
  {
    cout<<head->data;
    head=head->next;
  }
}   
