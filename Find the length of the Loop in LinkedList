#include<bits/stdc++.h>
using namespace std;
class Node
{
    public:
    int data;
    Node* next;
    public:
    Node(int data1,Node* next1)
    {
        data=data1;
        next=next1;
      
    }
    public:
    Node(int data1)
    {
        data=data1;
        next=nullptr;
    }
};
//brutte code
int lengthofloop(Node* head)
{
    Node* temp=head;
    int t=1;
    map<Node*,int>l;
    while(temp!=NULL)
    {
       
        if(l.find(temp)!=l.end())
        {
           int value=l[temp];
           return t-value;
           
        }
        l[temp]=t;
        t++;
        temp=temp->next;
    }
    return 0;
}
int findlength(Node* slow,Node* fast)
{
    int c=1;
    fast=fast->next;
    while(slow!=fast)
    {
        c++;
        fast=fast->next;

    }
    return c;
}
//optimise code and tortise algorithm;
int lengthofloop2(Node* head)
{
    Node* slow=head;
    Node* fast=head;
    while(fast!=NULL and fast->next!=NULL)
    {
        slow=slow->next;
         fast=fast->next->next;
         if(slow==fast)
         {
            return findlength(slow,fast);
         }
    }
    return false;
}
int main()
{
   //simple ll;
    Node* head = new Node(1);
    Node* second = new Node(2);
    Node* third = new Node(3);
    Node* fourth = new Node(4);
    Node* fifth = new Node(5);

    head->next = second;
    second->next = third;
    third->next = fourth;
    fourth->next = fifth;
     // Create a loop;
    fifth->next = head; 
   int l=lengthofloop(head);
  int k=lengthofloop2(head);
    cout<<l<<" "<<k;
       
    
}
