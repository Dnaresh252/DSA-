#include<bits/stdc++.h>
using namespace std;
class Node
{
    public:
    int data;
    Node* next;
    public:
    Node(int data1,Node* next1)
    {
        data=data1;
        next=next1;
      
    }
    public:
    Node(int data1)
    {
        data=data1;
        next=nullptr;
    }
};
//brutte approach
Node* detectstartingnode(Node* head)
{
    map<Node*,int>l;
    Node* temp=head;
    while(temp!=NULL)
    {
        if(l.find(temp)!=l.end())
        {
            return temp;
        }
        l[temp]=1;
        temp=temp->next;
    }
    return NULL;
}
//optimise apporach
Node*  startingnodeofloop(Node* head)
{
   
    Node* slow=head;
    Node* fast=head;
    while(fast!=NULL and fast->next!=NULL)
    {
        slow=slow->next;
        fast=fast->next->next;
        if(slow==fast)
        {
            slow=head;
            while(slow!=fast)
            {
                slow=slow->next;
                fast=fast->next;
            }
            return slow;
        }
    }
    return NULL;
}
int main()
{
   //simple ll;
    Node* head = new Node(1);
    Node* second = new Node(2);
    Node* third = new Node(3);
    Node* fourth = new Node(4);
    Node* fifth = new Node(5);

    head->next = second;
    second->next = third;
    third->next = fourth;
    fourth->next = fifth;
     // Create a loop;
    fifth->next = third; 
   Node* start=detectstartingnode(head);
   Node* startloop=startingnodeofloop(head);
   cout<<startloop->data;

       
    
}
