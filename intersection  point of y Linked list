//NOTE:-  may it not works for some copilers


#include<bits/stdc++.h>
using namespace std;
class Node
{
    public:
    int data;
    Node* next;
    public:
    Node(int data1,Node* next1)
    {
        data=data1;
        next=next1;
      
    }
    public:
    Node(int data1)
    {
        data=data1;
        next=nullptr;
    }
};
Node* conv(vector<int>k)
{
    Node* head=new Node(k[0]);
    Node* mov=head;
    for(int i=1;i<k.size();i++)
    {
       Node* temp=new Node(k[i]);
       mov->next=temp;
       mov=temp;

    }
    return head;

}
//butte code
Node* collisonpoint(Node* head, Node* head1,int d)
{
    Node* temp=head1;
    Node* temp1=head;
    while(d--)
    {
          temp=temp->next;
    }
    while(temp1!=temp)
    {
        temp=temp->next;
        temp1=temp1->next;
    }
    return temp1;

}
Node* intersectionofll(Node* head,Node* head1)
{
    Node* temp=head;
    int n=0;
      int n1=0;
    while(temp!=NULL)
    {
        n++;
        temp=temp->next;
    }
  
    temp=head1;
    while(temp!=NULL)
    {
        n1++;
        temp=temp->next;
    }
    if(n<n1)
    {
        return collisonpoint(head,head1,n1-n);
    }
    else
    {
        return collisonpoint(head1,head,n-n1);
    }
}
//optimise code;

//utility function to check presence of intersection
Node* intersectionPresent(Node* head1,Node* head2) {
    Node* d1 = head1;
    Node* d2 = head2;
    
    while(d1 != d2) {
        d1 = d1 == NULL? head2:d1->next;
        d2 = d2 == NULL? head1:d2->next;
    }
    
    return d1;
}

int main()
{
    vector<int>k={1,3,1,2,4};
    vector<int>k2={3,2,4};
    Node* head=conv(k);
    Node* head1=conv(k2);
    Node* intersec=intersectionPresent(head,head1); 
   cout<<intersec->data;
  
    
       
    
}
